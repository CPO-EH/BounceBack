filters:
  # "ip" filter fires only when list contains INGRESS ip address.
  # May be combined with "not" wrapper for allowlist.
  # PARAMS:
  # * list - path to list with ip addresses or/and subnets.
  #
  - name: default_ip_banlist
    type: ip
    params:
      list: data/banned_ips.txt

  - name: default_ip_allowlist
    type: not::ip
    params:
      list: data/allowed_ips.txt

  # "geo" filter fires only when ip geolocation lookup matches
  # ANY "geolocations" array element.
  # May be combined with "not" wrapper for organisations allowlist.
  # Now supported ip lookup services. How to check ip info:
  # * ip-api.com: curl -s 'http://ip-api.com/json/TARGET-IP/'
  # * ipapi.co: curl -s 'https://ipapi.co/TARGET-IP/json/'
  # PARAMS:
  # * geolocations - ARRAY of geolocations to match. All fields are re2 regexps arrays.
  #   Empty arrays will be ignored and marked as match. Only one regexp must match in each field.
  #   Geolocations array elements contain next ARRAY-fields:
  #     * organisation - organisation name (ORG, ISP and AS (if contains company name)).
  #     * country_code - country code (https://en.wikipedia.org/wiki/List_of_ISO_3166_country_codes).
  #     * country - country name.
  #     * region_code - region code.
  #     * region - region name.
  #     * city - city name.
  #     * timezone - timezone in format of Europe/Berlin.
  #     * asn - ASN in format of AS\d+.
  #
  - name: example_geo_filter_allowlist
    type: not::geo
    params:
      geolocations:
        - organisation:
            - (?i)google
            - (?i)youtube
          country_code:
            - US
          country:
            - (?i).*United States.*
          region_code:
            - VA
            - CA
          region:
            - Virginia
            - California
          city:
            - Ashburn
            - Mountain View
          timezone:
            - America/.*
          asn:
            - AS15169

  # "time" filter fires only when time of request is in time period.
  # May be combined with "and" filter for more than one time periods.
  # May be combined with "not" wrapper/filter for time allowlist.
  # PARAMS:
  # * from - start of time period in form of HH:mm.
  # * to - end of time period in form of HH:mm.
  # * timezone - timezone of "from" and "to" fields.
  # * weekdays - list of time period weekdays, empty == all
  #   may be: Monday, Tuesday, Wednesday, Thursday, Friday, Saturday, Sunday
  #
  - name: example_not_time_filter
    type: not::time
    params:
      from: 08:00
      to: 16:00
      timezone: Europe/Moscow
      weekdays:
        # - Monday
        # - Tuesday
        # - Wednesday
        # - Thursday
        # - Friday
        # - Saturday
        # - Sunday

  # "and" filter equals boolean AND.
  # Fires only when ALL passed filters fires.
  # PARAMS:
  # * filters - list of filter names above.
  #
  - name: and_usage_example
    type: and
    params:
      filters:
        - default_ip_banlist
        - default_ip_allowlist

  # "or" filter equals boolean OR.
  # Fires only when ANY passed filter fires.
  # PARAMS:
  # * filters - list of filter names above.
  #
  - name: or_usage_example
    type: or
    params:
      filters:
        - default_ip_banlist
        - default_ip_allowlist

  # "not" filter equals boolean NOT.
  # Fires only when passed filter NOT fires.
  # may be used as BASE (type: not) filter or WRAPPER filter (type: not::somefiltertype).
  # PARAMS for BASE filter:
  # * filter - filter name from above.
  #
  - name: not_usage_example
    type: not
    params:
      filter: default_ip_allowlist

proxies:
  - name: example http proxy
    type: http
    listen: 0.0.0.0:5001
    target: http://127.0.0.1:5002
    timeout: 10s
    # tls:
    #   cert: testdata/tls/cert.pem
    #   key: testdata/tls/key.pem
    on_filter_trigger:
      action: redirect
      url: https://www.youtube.com/watch?v=dQw4w9WgXcQ
    filters:
      # - default_ip_allowlist
      - default_ip_banlist
      - example_not_time_filter
      - example_geo_filter_allowlist
